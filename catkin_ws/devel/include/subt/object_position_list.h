// Generated by gencpp from file subt/object_position_list.msg
// DO NOT EDIT!


#ifndef SUBT_MESSAGE_OBJECT_POSITION_LIST_H
#define SUBT_MESSAGE_OBJECT_POSITION_LIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace subt
{
template <class ContainerAllocator>
struct object_position_list_
{
  typedef object_position_list_<ContainerAllocator> Type;

  object_position_list_()
    : object_name()
    , position()  {
    }
  object_position_list_(const ContainerAllocator& _alloc)
    : object_name(_alloc)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _object_name_type;
  _object_name_type object_name;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::subt::object_position_list_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt::object_position_list_<ContainerAllocator> const> ConstPtr;

}; // struct object_position_list_

typedef ::subt::object_position_list_<std::allocator<void> > object_position_list;

typedef boost::shared_ptr< ::subt::object_position_list > object_position_listPtr;
typedef boost::shared_ptr< ::subt::object_position_list const> object_position_listConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt::object_position_list_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt::object_position_list_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace subt

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'subt': ['/home/seanlai-laptop/subt/catkin_ws/src/subt/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::subt::object_position_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt::object_position_list_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt::object_position_list_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt::object_position_list_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt::object_position_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt::object_position_list_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt::object_position_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b35b8256c7ef7f810870db79f7ad15a";
  }

  static const char* value(const ::subt::object_position_list_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b35b8256c7ef7f8ULL;
  static const uint64_t static_value2 = 0x10870db79f7ad15aULL;
};

template<class ContainerAllocator>
struct DataType< ::subt::object_position_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt/object_position_list";
  }

  static const char* value(const ::subt::object_position_list_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt::object_position_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] object_name\n\
geometry_msgs/Point[] position\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::subt::object_position_list_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt::object_position_list_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_position_list_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt::object_position_list_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt::object_position_list_<ContainerAllocator>& v)
  {
    s << indent << "object_name[]" << std::endl;
    for (size_t i = 0; i < v.object_name.size(); ++i)
    {
      s << indent << "  object_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_MESSAGE_OBJECT_POSITION_LIST_H
